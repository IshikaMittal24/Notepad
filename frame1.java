
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.UndoManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ISHIKA MITTAL
 */
public class frame1 extends javax.swing.JFrame {

    /**
     * Creates new form frame1
     */
    String filename;
    String filepath;
    String cut_copy;
    String copy;
    String find;
    UndoManager um = new UndoManager();
    public frame1() {
        initComponents();
        setTitle("Notepad");
        setSize(1131,669);
        setDefaultCloseOperation(2);
        t1.getDocument().addUndoableEditListener(new UndoableEditListener()
        {
                @Override
                public void undoableEditHappened(UndoableEditEvent evt)
                {
                    um.addEdit(evt.getEdit());
                }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        t1 = new javax.swing.JTextArea();
        statusbar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        m1 = new javax.swing.JMenu();
        sb1 = new javax.swing.JMenuItem();
        sb2 = new javax.swing.JMenuItem();
        sb3 = new javax.swing.JMenuItem();
        sb4 = new javax.swing.JMenuItem();
        sb5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        sb8 = new javax.swing.JMenuItem();
        m2 = new javax.swing.JMenu();
        menuitemundo = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        menuitemFindnext = new javax.swing.JMenuItem();
        menuitemFindprevious = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        m3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        m4 = new javax.swing.JMenu();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(50, 50, 1131, 700));
        getContentPane().setLayout(null);

        t1.setColumns(20);
        t1.setRows(5);
        t1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                t1CaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(t1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 1130, 580);

        statusbar.setBackground(new java.awt.Color(153, 153, 153));
        statusbar.setForeground(new java.awt.Color(153, 153, 153));
        statusbar.setToolTipText("");
        statusbar.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setText("UTF-8");
        statusbar.add(jLabel1);
        jLabel1.setBounds(1060, 10, 40, 15);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setText("WINDOWS (CRLF)");
        statusbar.add(jLabel2);
        jLabel2.setBounds(940, 10, 100, 13);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel3.setText("Ln "+frame1.t1.getLineCount()+"  Col "+frame1.t1.getColumns());
        statusbar.add(jLabel3);
        jLabel3.setBounds(760, 10, 110, 15);

        getContentPane().add(statusbar);
        statusbar.setBounds(0, 580, 1130, 30);

        m1.setText("File");

        sb1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        sb1.setText("New");
        sb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sb1ActionPerformed(evt);
            }
        });
        m1.add(sb1);

        sb2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        sb2.setText("New Window");
        sb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sb2ActionPerformed(evt);
            }
        });
        m1.add(sb2);

        sb3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        sb3.setText("Open...");
        sb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sb3ActionPerformed(evt);
            }
        });
        m1.add(sb3);

        sb4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        sb4.setText("Save");
        sb4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sb4ActionPerformed(evt);
            }
        });
        m1.add(sb4);

        sb5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        sb5.setText("Save As...");
        sb5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sb5ActionPerformed(evt);
            }
        });
        m1.add(sb5);
        m1.add(jSeparator1);

        sb8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        sb8.setText("Exit");
        sb8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sb8ActionPerformed(evt);
            }
        });
        m1.add(sb8);

        jMenuBar1.add(m1);

        m2.setText("Edit");

        menuitemundo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuitemundo.setText("Undo");
        menuitemundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemundoActionPerformed(evt);
            }
        });
        m2.add(menuitemundo);
        m2.add(jSeparator4);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Cut");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Copy");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Paste");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItem5.setText("Delete");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem5);
        m2.add(jSeparator5);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Find...");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem7);

        menuitemFindnext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        menuitemFindnext.setText("Find Next");
        menuitemFindnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemFindnextActionPerformed(evt);
            }
        });
        m2.add(menuitemFindnext);

        menuitemFindprevious.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_MASK));
        menuitemFindprevious.setText("Find Previous");
        menuitemFindprevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemFindpreviousActionPerformed(evt);
            }
        });
        m2.add(menuitemFindprevious);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Replace...");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem10);
        m2.add(jSeparator6);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Select All");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem13.setText("Time/Date");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        m2.add(jMenuItem13);

        jMenuBar1.add(m2);

        m3.setText("Format");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Word Wrap");
        jCheckBoxMenuItem1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem1ItemStateChanged(evt);
            }
        });
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        m3.add(jCheckBoxMenuItem1);

        jMenuItem20.setText("Font");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        m3.add(jMenuItem20);

        jMenuBar1.add(m3);

        m4.setText("View");

        jCheckBoxMenuItem4.setSelected(true);
        jCheckBoxMenuItem4.setText("Status Bar");
        jCheckBoxMenuItem4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem4ItemStateChanged(evt);
            }
        });
        jCheckBoxMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem4ActionPerformed(evt);
            }
        });
        m4.add(jCheckBoxMenuItem4);

        jMenuBar1.add(m4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sb4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sb4ActionPerformed
        // TODO add your handling code here:
        //SAVE
       if(filename==null)
       {
           saveAs();
       }
       else
       {
           try
           {
               FileWriter fw = new FileWriter(filepath);
               BufferedWriter bf = new BufferedWriter(fw);
               bf.write(t1.getText());
               bf.close();
           }catch(IOException ee)
           {
               System.out.println("Error is : "+ee);
           }
       }
        
    }//GEN-LAST:event_sb4ActionPerformed

    private void sb5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sb5ActionPerformed
        // TODO add your handling code here:
        //SAVE AS
        saveAs();
    }//GEN-LAST:event_sb5ActionPerformed
 public void saveAs()
 {
     JFileChooser jc = new JFileChooser();
        int n = jc.showSaveDialog(this);
        if(n==0)
        {
            try{
            File str = jc.getSelectedFile();
            str.createNewFile();
            filename = getName();
            filepath = str.getAbsolutePath();
            FileWriter fw = new FileWriter(filepath);
            BufferedWriter bf = new BufferedWriter(fw);
            bf.write(t1.getText());
            bf.close();
            
            }catch(Exception ee)
            {
                System.out.println("Error is : "+ee);
            }
        }
 }
    private void menuitemundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemundoActionPerformed
        // TODO add your handling code here:
        //UNDO
        if(um.canUndo())
        {
            um.undo();
        }
    }//GEN-LAST:event_menuitemundoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //CUT
         cut_copy = t1.getSelectedText();
         String s = t1.getText();
         int len = s.length();
         int s1 = t1.getSelectionStart();
         int s2 = t1.getSelectionEnd();
         String s3 = s.substring(0,s1);
         String s4 = s.substring(s2,len);
         t1.setText(s3+s4);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void menuitemFindnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemFindnextActionPerformed
        // TODO add your handling code here:
        //FIND NEXT
        this.find = Dialog1.find;
        if(find==null)
        {
            Dialog1 d = new Dialog1(this,false);
            d.setVisible(true);
        }
        else
        {
            int index=0;
            String tf = find;
            String ta = t1.getText();
            int n = t1.getCaretPosition();
            if(n==ta.length())
            {
                JOptionPane.showMessageDialog(this,"Cannot find "+tf);
            }
            else
            {
                String sub = ta.substring(n,ta.length());
                if(!sub.contains(tf))
                {
                    JOptionPane.showMessageDialog(this,"Cannot find "+tf);
                }
                else
                {
                    index = ta.indexOf(tf,n);
                    t1.select(index, index+tf.length());
                }
            }
        }
    }//GEN-LAST:event_menuitemFindnextActionPerformed

    private void sb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sb1ActionPerformed
        // TODO add your handling code here:
        //NEW
             int n;
            String s = t1.getText();
             if(!s.isEmpty() && filename==null )
            {
                 n = JOptionPane.showConfirmDialog(this,"Do you want to save changes to Untitled?");
                 if(n==0)
                 {
                     saveAs();
                     
                     filename=null;
                     filepath=null;
                     t1.setText("");
                 }
            }
             else if(!s.isEmpty() && filename!=null)
            {
                try
                {
                    FileInputStream fin = new FileInputStream(filepath);
                    int l = fin.available();
                    byte[] b = new byte[l];
                    fin.read(b);
                    String strarr = new String(b);
                    if(strarr != s)
                    {
                        n = JOptionPane.showConfirmDialog(this,"Do you want to save changes to Untitled?");
                        if(n==0)
                        {
                            FileWriter fw = new FileWriter(filepath);
                            BufferedWriter bf = new BufferedWriter(fw);
                            bf.write(t1.getText());
                            bf.close(); 
                        }
                        filename=null;
                        filepath=null;
                        t1.setText("");
                  
                    }
                }catch(IOException ee)
                {
                }
                 
            }
             else
           {
               filename=null;
               filepath=null;
               t1.setText("");
           }
    }//GEN-LAST:event_sb1ActionPerformed

    private void sb8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sb8ActionPerformed
        // TODO add your handling code here:
        //EXIT
        int n = JOptionPane.showConfirmDialog(this,"Are you sure?");
        if(n==0)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_sb8ActionPerformed

    private void sb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sb3ActionPerformed
        // TODO add your handling code here:
        //OPEN
        JFileChooser jc=new JFileChooser();
        int s = jc.showOpenDialog(this);
        if(s==0)
        {
            File a = jc.getSelectedFile();
            filepath=a.getAbsolutePath();
            filename=a.getName();
            try
            {
                FileInputStream fin = new FileInputStream(a);
                int size = fin.available();
                byte[] b = new byte[size];
                fin.read(b);
                String str = new String(b);
                t1.setText(str);
            }catch(IOException ee)
            {
                System.out.println("Error is : "+ee);
            }
        }
    }//GEN-LAST:event_sb3ActionPerformed

    private void sb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sb2ActionPerformed
        // TODO add your handling code here:
        //NEW WINDOW
        frame1 f2 = new frame1();
        f2.setVisible(true);
    }//GEN-LAST:event_sb2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        //PASTE
        String s = t1.getText();
        int n = t1.getCaretPosition();
        String s1 = s.substring(0,n);
        String s2=s.substring(n);
        t1.setText(s1+cut_copy+s2);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        //COPY
        cut_copy = t1.getSelectedText();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        //DELETE
        String s = t1.getText();
        int n1 = t1.getSelectionStart();
        int n2 = t1.getSelectionEnd();
        String s1 = s.substring(0,n1);
        String s2 = s.substring(n2);
        t1.setText(s1+s2);
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        //FIND
        Dialog1 d = new Dialog1(this,false);
        d.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void menuitemFindpreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemFindpreviousActionPerformed
        // TODO add your handling code here:
        //FIND PREVIOUS
        this.find = Dialog1.find;
        if(find==null)
        {
            Dialog1 d = new Dialog1(this,false);
            d.setVisible(true);
        }
        else
        {
            String ta = t1.getText();
            String tf= find;
            int n = t1.getCaretPosition();
            if(n<=0)
            {
                JOptionPane.showMessageDialog(this,"Cannot Find "+tf);
            }
            else
            {
                String sub = ta.substring(0,n);
                if(!sub.contains(tf))
                {
                    JOptionPane.showMessageDialog(this,"Cannot Find "+tf);
                }
                else
                {
                    int index = sub.lastIndexOf(tf,n);
                    t1.setCaretPosition(index+tf.length());
                    t1.moveCaretPosition(index);
                }
            }
        }
    }//GEN-LAST:event_menuitemFindpreviousActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        //REPLACE
        Dialog2 d = new Dialog2(this,false);
        d.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        //SELECT ALL
        String str = t1.getText();
        int len = str.length();
        t1.setSelectionStart(0);
        t1.setSelectionEnd(len);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        //TIME DATE
        String str = t1.getText();
        GregorianCalendar g = new GregorianCalendar();
        t1.setText(str+" "+g.get(Calendar.DATE)+" - "+g.get(Calendar.MONTH)+" - "+g.get(Calendar.YEAR)+"     "+g.get(Calendar.HOUR)+" : "+g.get(Calendar.MINUTE)+" : "+g.get(Calendar.SECOND));
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jCheckBoxMenuItem1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ItemStateChanged
        // TODO add your handling code here:
        //WORD WRAP
        boolean on = jCheckBoxMenuItem1.getState();
        if(on)
        {
            t1.setLineWrap(true);
        }
        else
                t1.setLineWrap(false);
    }//GEN-LAST:event_jCheckBoxMenuItem1ItemStateChanged

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        // TODO add your handling code here:
        //FONT
        JFontChooser jfc = new JFontChooser();
        jfc.setVisible(true);
        jfc.getOk().addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {       
                t1.setFont(jfc.font());
                jfc.setVisible(false);
            }      
        });
        
         jfc.getCancel().addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {       
                jfc.setVisible(false);
            }      
        });
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCheckBoxMenuItem4ItemStateChanged

    private void jCheckBoxMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ActionPerformed
        // TODO add your handling code here:
        boolean on = jCheckBoxMenuItem4.getState();
        if(on)
        {
            statusbar.setVisible(true);
        }
        else
        {
            statusbar.setVisible(false);
            t1.setSize(1131, 675);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem4ActionPerformed

    private void t1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_t1CaretUpdate
        // TODO add your handling code here:

    }//GEN-LAST:event_t1CaretUpdate

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenu m1;
    private javax.swing.JMenu m2;
    private javax.swing.JMenu m3;
    private javax.swing.JMenu m4;
    private javax.swing.JMenuItem menuitemFindnext;
    private javax.swing.JMenuItem menuitemFindprevious;
    private javax.swing.JMenuItem menuitemundo;
    private javax.swing.JMenuItem sb1;
    private javax.swing.JMenuItem sb2;
    private javax.swing.JMenuItem sb3;
    private javax.swing.JMenuItem sb4;
    private javax.swing.JMenuItem sb5;
    private javax.swing.JMenuItem sb8;
    private javax.swing.JPanel statusbar;
    public static javax.swing.JTextArea t1;
    // End of variables declaration//GEN-END:variables
}
